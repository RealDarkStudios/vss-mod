plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}
repositories {
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.terraformersmc.com/releases/" }
    maven { url = "https://maven.ladysnake.org/releases" }
    maven { url = "https://jitpack.io"}
    maven { url = "https://api.modrinth.com/maven" }
}
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")
    // Mod menu
    modImplementation("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    // Trinkets
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    // Midnight Lib
    modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"

    // Pehkui
    modImplementation "com.github.Virtuoel:Pehkui:${project.pehkui_version}", {
        exclude group: "net.fabricmc.fabric-api"
    }
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
